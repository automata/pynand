// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed
 * within a frame which is 11 pixels high (including 1 pixel for inter-line
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    // static Array charMaps;

    static int cursorY, cursorX;
    static String temp;

    /** Initializes the screen, and locates the cursor at the screen's top-left. */
    function void init() {
        let cursorY = 0;
        let cursorX = 0;
        let temp = String.new(6);  // space for any int
        return;
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        let cursorY = i;
        let cursorX = j;
        return;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        // Implementation:
        //
        // Use a giant switch to pick the right pixels for this char. This
        // eliminates the very expensive initialization that the authors'
        // version does at startup, and it eliminates those 90-odd Arrays
        // on the heap, but it moves some additional work to each call:
        //
        // The switch itself, which is always 7 branches deep. This looks a heck of a lot
        // better if you use alt/lazy, which eliminates much of the thrash on the stack for
        // these conditionals, or alt/sp, which compresses them much more. Even better
        // would be a proper computed jump.
        //
        // Pushing 11 arguments onto the stack is more expensive than indexing into an array
        // of 11 words.

        var Array tty;

        if (c = 128) {  // newLine
            do Output.println();
            return;
        }

        if (c = 129) {  // backspace
            let cursorX = cursorX - 1;
            do Output.printChar(32);
            let cursorX = cursorX - 1;
            return;
        }

        if ((cursorY < 0) | (cursorY > 22) | (cursorX < 0) | (cursorX > 63)) {
            return;
        }

        let tty = 24576;  // 0x6000
        let tty[0] = c;

        // Update the cursor position *first*, so we can return early. _drawChar() will account for it.
        let cursorX = cursorX + 1;

        if (c & 64){
            if (c & 32){
                if (c & 16){
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) {  }
                                else {       do Output._drawChar(38, 45, 25, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x7e = 126 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(7, 12, 12, 12, 56, 12, 12, 12, 7, 0, 0); return;  /* 0x7d = 125 */ }
                                else {       do Output._drawChar(12, 12, 12, 12, 12, 12, 12, 12, 12, 0, 0); return;  /* 0x7c = 124 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(56, 12, 12, 12, 7, 12, 12, 12, 56, 0, 0); return;  /* 0x7b = 123 */ }
                                else {       do Output._drawChar(0, 0, 0, 63, 27, 12, 6, 51, 63, 0, 0); return;  /* 0x7a = 122 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 51, 51, 51, 62, 48, 24, 15, 0); return;  /* 0x79 = 121 */ }
                                else {       do Output._drawChar(0, 0, 0, 51, 30, 12, 12, 30, 51, 0, 0); return;  /* 0x78 = 120 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 51, 51, 51, 63, 63, 18, 0, 0); return;  /* 0x77 = 119 */ }
                                else {       do Output._drawChar(0, 0, 0, 51, 51, 51, 51, 30, 12, 0, 0); return;  /* 0x76 = 118 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 27, 27, 27, 27, 27, 54, 0, 0); return;  /* 0x75 = 117 */ }
                                else {       do Output._drawChar(4, 6, 6, 15, 6, 6, 6, 54, 28, 0, 0); return;  /* 0x74 = 116 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 30, 51, 6, 24, 51, 30, 0, 0); return;  /* 0x73 = 115 */ }
                                else {       do Output._drawChar(0, 0, 0, 29, 55, 51, 3, 3, 7, 0, 0); return;  /* 0x72 = 114 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 30, 51, 51, 51, 62, 48, 48, 0); return;  /* 0x71 = 113 */ }
                                else {       do Output._drawChar(0, 0, 0, 30, 51, 51, 51, 31, 3, 3, 0); return;  /* 0x70 = 112 */ }
                            }
                        }
                    }
                }
                else {
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 30, 51, 51, 51, 51, 30, 0, 0); return;  /* 0x6f = 111 */ }
                                else {       do Output._drawChar(0, 0, 0, 29, 51, 51, 51, 51, 51, 0, 0); return;  /* 0x6e = 110 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 29, 63, 43, 43, 43, 43, 0, 0); return;  /* 0x6d = 109 */ }
                                else {       do Output._drawChar(14, 12, 12, 12, 12, 12, 12, 12, 30, 0, 0); return;  /* 0x6c = 108 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(3, 3, 3, 51, 27, 15, 15, 27, 51, 0, 0); return;  /* 0x6b = 107 */ }
                                else {       do Output._drawChar(48, 48, 0, 56, 48, 48, 48, 48, 51, 30, 0); return;  /* 0x6a = 106 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(12, 12, 0, 14, 12, 12, 12, 12, 30, 0, 0); return;  /* 0x69 = 105 */ }
                                else {       do Output._drawChar(3, 3, 3, 27, 55, 51, 51, 51, 51, 0, 0); return;  /* 0x68 = 104 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 30, 51, 51, 51, 62, 48, 51, 30, 0); return;  /* 0x67 = 103 */ }
                                else {       do Output._drawChar(28, 54, 38, 6, 15, 6, 6, 6, 15, 0, 0); return;  /* 0x66 = 102 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 30, 51, 63, 3, 51, 30, 0, 0); return;  /* 0x65 = 101 */ }
                                else {       do Output._drawChar(48, 48, 48, 60, 54, 51, 51, 51, 30, 0, 0); return;  /* 0x64 = 100 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 30, 51, 3, 3, 51, 30, 0, 0); return;  /* 0x63 = 99 */ }
                                else {       do Output._drawChar(3, 3, 3, 15, 27, 51, 51, 51, 30, 0, 0); return;  /* 0x62 = 98 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 14, 24, 30, 27, 27, 54, 0, 0); return;  /* 0x61 = 97 */ }
                                else {       do Output._drawChar(6, 12, 24, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x60 = 96 */ }
                            }
                        }
                    }
                }
            }
            else {
                if (c & 16){
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0); return;  /* 0x5f = 95 */ }
                                else {       do Output._drawChar(8, 28, 54, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x5e = 94 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(30, 24, 24, 24, 24, 24, 24, 24, 30, 0, 0); return;  /* 0x5d = 93 */ }
                                else {       do Output._drawChar(0, 0, 1, 3, 6, 12, 24, 48, 32, 0, 0); return;  /* 0x5c = 92 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(30, 6, 6, 6, 6, 6, 6, 6, 30, 0, 0); return;  /* 0x5b = 91 */ }
                                else {       do Output._drawChar(63, 51, 49, 24, 12, 6, 35, 51, 63, 0, 0); return;  /* 0x5a = 90 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(51, 51, 51, 51, 30, 12, 12, 12, 30, 0, 0); return;  /* 0x59 = 89 */ }
                                else {       do Output._drawChar(51, 51, 30, 30, 12, 30, 30, 51, 51, 0, 0); return;  /* 0x58 = 88 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(51, 51, 51, 51, 51, 63, 63, 63, 18, 0, 0); return;  /* 0x57 = 87 */ }
                                else {       do Output._drawChar(51, 51, 51, 51, 51, 30, 30, 12, 12, 0, 0); return;  /* 0x56 = 86 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(51, 51, 51, 51, 51, 51, 51, 51, 30, 0, 0); return;  /* 0x55 = 85 */ }
                                else {       do Output._drawChar(63, 63, 45, 12, 12, 12, 12, 12, 30, 0, 0); return;  /* 0x54 = 84 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(30, 51, 51, 6, 28, 48, 51, 51, 30, 0, 0); return;  /* 0x53 = 83 */ }
                                else {       do Output._drawChar(31, 51, 51, 51, 31, 27, 51, 51, 51, 0, 0); return;  /* 0x52 = 82 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(30, 51, 51, 51, 51, 51, 63, 59, 30, 48, 0); return;  /* 0x51 = 81 */ }
                                else {       do Output._drawChar(31, 51, 51, 51, 31, 3, 3, 3, 3, 0, 0); return;  /* 0x50 = 80 */ }
                            }
                        }
                    }
                }
                else {
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(30, 51, 51, 51, 51, 51, 51, 51, 30, 0, 0); return;  /* 0x4f = 79 */ }
                                else {       do Output._drawChar(51, 51, 55, 55, 63, 59, 59, 51, 51, 0, 0); return;  /* 0x4e = 78 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(33, 51, 63, 63, 51, 51, 51, 51, 51, 0, 0); return;  /* 0x4d = 77 */ }
                                else {       do Output._drawChar(3, 3, 3, 3, 3, 3, 35, 51, 63, 0, 0); return;  /* 0x4c = 76 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(51, 51, 51, 27, 15, 27, 51, 51, 51, 0, 0); return;  /* 0x4b = 75 */ }
                                else {       do Output._drawChar(60, 24, 24, 24, 24, 24, 27, 27, 14, 0, 0); return;  /* 0x4a = 74 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(30, 12, 12, 12, 12, 12, 12, 12, 30, 0, 0); return;  /* 0x49 = 73 */ }
                                else {       do Output._drawChar(51, 51, 51, 51, 63, 51, 51, 51, 51, 0, 0); return;  /* 0x48 = 72 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(28, 54, 35, 3, 59, 51, 51, 54, 44, 0, 0); return;  /* 0x47 = 71 */ }
                                else {       do Output._drawChar(63, 51, 35, 11, 15, 11, 3, 3, 3, 0, 0); return;  /* 0x46 = 70 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(63, 51, 35, 11, 15, 11, 35, 51, 63, 0, 0); return;  /* 0x45 = 69 */ }
                                else {       do Output._drawChar(15, 27, 51, 51, 51, 51, 51, 27, 15, 0, 0); return;  /* 0x44 = 68 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(28, 54, 35, 3, 3, 3, 35, 54, 28, 0, 0); return;  /* 0x43 = 67 */ }
                                else {       do Output._drawChar(31, 51, 51, 51, 31, 51, 51, 51, 31, 0, 0); return;  /* 0x42 = 66 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(30, 51, 51, 51, 63, 51, 51, 51, 51, 0, 0); return;  /* 0x41 = 65 */ }
                                else {       do Output._drawChar(30, 51, 51, 59, 59, 59, 27, 3, 30, 0, 0); return;  /* 0x40 = 64 */ }
                            }
                        }
                    }
                }
            }
        }
        else {
            if (c & 32){
                if (c & 16){
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(30, 51, 51, 24, 12, 12, 0, 12, 12, 0, 0); return;  /* 0x3f = 63 */ }
                                else {       do Output._drawChar(0, 0, 3, 6, 12, 24, 12, 6, 3, 0, 0); return;  /* 0x3e = 62 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 63, 0, 0, 63, 0, 0, 0, 0); return;  /* 0x3d = 61 */ }
                                else {       do Output._drawChar(0, 0, 24, 12, 6, 3, 6, 12, 24, 0, 0); return;  /* 0x3c = 60 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 12, 12, 0, 0, 12, 12, 6, 0, 0); return;  /* 0x3b = 59 */ }
                                else {       do Output._drawChar(0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 0); return;  /* 0x3a = 58 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(30, 51, 51, 51, 62, 48, 48, 24, 14, 0, 0); return;  /* 0x39 = 57 */ }
                                else {       do Output._drawChar(30, 51, 51, 51, 30, 51, 51, 51, 30, 0, 0); return;  /* 0x38 = 56 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(63, 49, 48, 48, 24, 12, 12, 12, 12, 0, 0); return;  /* 0x37 = 55 */ }
                                else {       do Output._drawChar(28, 6, 3, 3, 31, 51, 51, 51, 30, 0, 0); return;  /* 0x36 = 54 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(63, 3, 3, 31, 48, 48, 48, 51, 30, 0, 0); return;  /* 0x35 = 53 */ }
                                else {       do Output._drawChar(16, 24, 28, 26, 25, 63, 24, 24, 60, 0, 0); return;  /* 0x34 = 52 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(30, 51, 48, 48, 28, 48, 48, 51, 30, 0, 0); return;  /* 0x33 = 51 */ }
                                else {       do Output._drawChar(30, 51, 48, 24, 12, 6, 3, 51, 63, 0, 0); return;  /* 0x32 = 50 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(12, 14, 15, 12, 12, 12, 12, 12, 63, 0, 0); return;  /* 0x31 = 49 */ }
                                else {       do Output._drawChar(12, 30, 51, 51, 51, 51, 51, 30, 12, 0, 0); return;  /* 0x30 = 48 */ }
                            }
                        }
                    }
                }
                else {
                    if (c & 8){
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 32, 48, 24, 12, 6, 3, 1, 0, 0); return;  /* 0x2f = 47 */ }
                                else {       do Output._drawChar(0, 0, 0, 0, 0, 0, 0, 12, 12, 0, 0); return;  /* 0x2e = 46 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0); return;  /* 0x2d = 45 */ }
                                else {       do Output._drawChar(0, 0, 0, 0, 0, 0, 0, 12, 12, 6, 0); return;  /* 0x2c = 44 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 0, 0, 12, 12, 63, 12, 12, 0, 0, 0); return;  /* 0x2b = 43 */ }
                                else {       do Output._drawChar(0, 0, 0, 51, 30, 63, 30, 51, 0, 0, 0); return;  /* 0x2a = 42 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(6, 12, 24, 24, 24, 24, 24, 12, 6, 0, 0); return;  /* 0x29 = 41 */ }
                                else {       do Output._drawChar(24, 12, 6, 6, 6, 6, 6, 12, 24, 0, 0); return;  /* 0x28 = 40 */ }
                            }
                        }
                    }
                    else {
                        if (c & 4){
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(12, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x27 = 39 */ }
                                else {       do Output._drawChar(12, 30, 30, 12, 54, 27, 27, 27, 54, 0, 0); return;  /* 0x26 = 38 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(0, 0, 35, 51, 24, 12, 6, 51, 49, 0, 0); return;  /* 0x25 = 37 */ }
                                else {       do Output._drawChar(12, 30, 51, 3, 30, 48, 51, 30, 12, 12, 0); return;  /* 0x24 = 36 */ }
                            }
                        }
                        else {
                            if (c & 2){
                                if (c & 1) { do Output._drawChar(0, 18, 18, 63, 18, 18, 63, 18, 18, 0, 0); return;  /* 0x23 = 35 */ }
                                else {       do Output._drawChar(54, 54, 20, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x22 = 34 */ }
                            }
                            else {
                                if (c & 1) { do Output._drawChar(12, 30, 30, 30, 12, 12, 0, 12, 12, 0, 0); return;  /* 0x21 = 33 */ }
                                else {       do Output._drawChar(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); return;  /* 0x20 = 32 */ }
                            }
                        }
                    }
                }
            }
        }

        // Fallback: the black box
        do Output._drawChar(63, 63, 63, 63, 63, 63, 63, 63, 63, 0, 0); return;  /* 0x0 = 0 */

        return;
    }

    // Note: assuming the cursor is located on screen, and cursorX is one position past it.
    //
    // Each row contains two copies of the pixels to be drawn in the corrseponding row:
    // one in the low byte (for odd colums), and another in the upper byte (for even columns).
    //
    // TODO: inline this into the bottom of printChar, to avoid the function call overhead.
    function void _drawChar(int r1, int r2, int r3, int r4, int r5,
                         int r6, int r7, int r8, int r9, int r10, int r11) {
        var Array pixelPair;
        var int maskPos, maskNeg;

        let pixelPair = 16384 + (352 * cursorY) + ((cursorX-1)/2);

        if (cursorX & 1) {
            // Odd column: pixels in the low byte
            let maskPos = 255;
            let maskNeg = ~255;
        }
        else {
            let maskPos = ~255;
            let maskNeg = 255;
        }

        let r1 = (256*r1) + r1;  // temp! bake this into the constants above
        let r2 = (256*r2) + r2;  // temp! bake this into the constants above
        let r3 = (256*r3) + r3;  // temp! bake this into the constants above
        let r4 = (256*r4) + r4;  // temp! bake this into the constants above
        let r5 = (256*r5) + r5;  // temp! bake this into the constants above
        let r6 = (256*r6) + r6;  // temp! bake this into the constants above
        let r7 = (256*r7) + r7;  // temp! bake this into the constants above
        let r8 = (256*r8) + r8;  // temp! bake this into the constants above
        let r9 = (256*r9) + r9;  // temp! bake this into the constants above
        let r10 = (256*r10) + r10;  // temp! bake this into the constants above
        let r11 = (256*r11) + r11;  // temp! bake this into the constants above

        let pixelPair[0]   = (pixelPair[0]   & maskNeg) | (r1 & maskPos);
        let pixelPair[32]  = (pixelPair[32]  & maskNeg) | (r2 & maskPos);
        let pixelPair[64]  = (pixelPair[64]  & maskNeg) | (r3 & maskPos);
        let pixelPair[96]  = (pixelPair[96]  & maskNeg) | (r4 & maskPos);
        let pixelPair[128] = (pixelPair[128] & maskNeg) | (r5 & maskPos);
        let pixelPair[160] = (pixelPair[160] & maskNeg) | (r6 & maskPos);
        let pixelPair[192] = (pixelPair[192] & maskNeg) | (r7 & maskPos);
        let pixelPair[224] = (pixelPair[224] & maskNeg) | (r8 & maskPos);
        let pixelPair[256] = (pixelPair[256] & maskNeg) | (r9 & maskPos);
        let pixelPair[288] = (pixelPair[288] & maskNeg) | (r10 & maskPos);
        let pixelPair[320] = (pixelPair[320] & maskNeg) | (r11 & maskPos);

        return;
    }


    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int ptr;

        let ptr = 0;
        while (ptr < s.length()) {
            do Output.printChar(s.charAt(ptr));
            let ptr = ptr + 1;
        }

        return;
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        do temp.setInt(i);
        do Output.printString(temp);
        return;
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
        let cursorY = cursorY + 1;
        let cursorX = 0;
        return;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
        if (cursorX > 0) {
            let cursorX = cursorX - 1;
        }
        return;
    }
}
